<%
const { utils, route, config } = it;
const { getInlineParseContent } = utils;
const { pathParams, path, method, payload, security, requestParams } = route.request;
const { type } = route.response;
const routeDocs = includeFile("./route-docs", { config, route, utils });

const requestTypes = [];

if (payload)
{
    requestTypes.push(payload.type)
}

if (requestParams)
{
    requestTypes.push(getInlineParseContent(requestParams))
}

if (pathParams)
{
    requestTypes.push(pathParams.type);
}

let requestType = requestTypes.join(' & ') || 'undefined';

const responseType = route.response.type;
const name = route.routeName.usage.replace('app','')
const capitalize = (name) => name.charAt(0).toUpperCase() + name.slice(1)

const cachableName = `cachable${capitalize(name)}`;
const methodName = name.replace(name[0],name[0].toLowerCase())

const configGetterName = `${methodName}Config`

%>

get <%~ configGetterName %>(){
return Object.freeze(<%~route.routeName.usage %>Config);
}

/**
<%~ routeDocs.description %>

*<% /* Here you can add some other JSDoc tags */ %>

*/
<%~ methodName %> = (request:<%~ requestType %>,options?: ProviderRequestOptions) =>
{
return this.<%~method%>(<%~route.routeName.usage %>Config,request,options)
}

<% if(method === "get") {
    const capitalized = method.charAt(0).toUpperCase() + method.slice(1)
    const cachableMethod = `cachable${capitalized}`
%>
/**
<%~ routeDocs.description %>

*<% /* Here you can add some other JSDoc tags */ %>

*/
<%~ cachableName %> = (request:<%~ requestType %>,options?: ProviderRequestOptions) =>
{
return this.<%~cachableMethod%>(<%~route.routeName.usage %>Config,request,options)
}
<% }%>