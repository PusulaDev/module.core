<%
const { utils, route, config } = it;
const { getInlineParseContent } = utils;
const { pathParams, path, method, payload, security, requestParams } = route.request;
const { type } = route.response;
const routeDocs = includeFile("./route-docs", { config, route, utils });



const responseType = route.response.type;
const name = route.routeName.usage.replace('app','')
const capitalize = (name) => name.charAt(0).toUpperCase() + name.slice(1)

const cachableName = `cachable${capitalize(name)}`;
const methodName = name.replace(name[0],name[0].toLowerCase())

const configGetterName = `${methodName}Config`
const configName = `${route.routeName.usage}Config`

let requestType = `typeof ${configName} extends ICachableRequestConfig<infer X> ? X : never`;
%>

get <%~ configGetterName %>(){
return Object.freeze(<%~ configName %>);
}

/**
<%~ routeDocs.description %>

*<% /* Here you can add some other JSDoc tags */ %>

*/
<%~ methodName %> = (request:<%~ requestType %>,options?: ProviderRequestOptions) =>
{
return this.<%~method%>(<%~ configName %>,request,options)
}

<% if(method === "get") {
    const capitalized = method.charAt(0).toUpperCase() + method.slice(1)
    const cachableMethod = `cachable${capitalized}`
%>
/**
<%~ routeDocs.description %>

*<% /* Here you can add some other JSDoc tags */ %>

*/
<%~ cachableName %> = (request:<%~ requestType %>,options?: ProviderRequestOptions) =>
{
return this.<%~cachableMethod%>(<%~ configName %>,request,options)
}
<% }%>