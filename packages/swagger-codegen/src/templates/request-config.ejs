<%
const { utils, route, config, modelTypes } = it;
const { requestBodyInfo, responseBodyInfo, specificArgNameResolver } = route;
const { _, getInlineParseContent, getParseContent, parseSchema, getComponentByRef, require } = utils;
const { path, method, payload, query, formData, security, requestParams, pathParams } = route.request;

const securityTmpl = security ? "true" : null;
const requestTypeMap = {
    body: null,
    query: null,
    path: null
};
let hasArrayType = false;

const requestTypes = [];
const queryKeys = [];

const findContract = (name) => {
    return modelTypes.find(e => e.name === name);
};

if (payload) {
    requestTypeMap.body = payload.type;
    requestTypes.push(payload.type);

    if (payload.type.includes("[]")) {
        hasArrayType = true;
    }
}

if (requestParams) {
    const name = getInlineParseContent(requestParams);

    requestTypeMap.query = name;
    requestTypes.push(name);

    const requestParamContract = findContract(name);

    Object.values(requestParamContract.properties).forEach(item => {
        if (item.in === "query") queryKeys.push(item.name);
    });

    if (name.includes("[]")) {
        hasArrayType = true;
    }
}

if (pathParams) {
    requestTypeMap.path = pathParams.type;
    requestTypes.push(pathParams.type);

    if (pathParams.type.includes("[]")) {
        hasArrayType = true;
    }
}

let validationProperties = [];

const contracts = modelTypes.filter(e =>
        requestTypes.some(requestType => {
            let name = requestType;
            if (name.includes("[]")) {
                name = name.replace(")[]", "").replace("(", "");
            }
            return e.name === name;
        }));

const addRules = (contract) => {
    const rules = getRules(contract);
    validationProperties.push(...rules)
}

const getRules = (contract) =>
    contract?.rawContent?.map(field => getFieldRules(field)).filter(e=>Boolean(e));


const getFieldRules = (field) => {
    if (validationProperties.some(e => e.name === field.name)) return;

    const rules = {
        isRequired: field.isRequired,
        maxLength: field.maxLength,
        minLength: field.minLength,
        minimum: field.minimum,
        maximum: field.maximum,
        exclusiveMinimum: field.exclusiveMinimum,
        exclusiveMaximum: field.exclusiveMaximum,
        pattern: field.pattern,
        uniqueItems: field.uniqueItems
    };

    let hasAnyRule = Object.values(rules).some(e => Boolean(e));

    const rule = {
            name: field.name.replaceAll("\"", ""),
            type: field.type,
            rules: hasAnyRule ? rules : undefined
        };

    if(field.type === 'array'){
        const itemName = field.items?.['$parsed']?.name;
        const contract = findContract(itemName);

        if(contract)
        {
            const childRules = getRules(contract);
            if(childRules.length){
                rule.children = childRules;
                hasAnyRule = true;
            }
        }
    }

    return hasAnyRule ? rule : undefined;
}

contracts.forEach(contract => addRules(contract));



let requestType = requestTypes.join(" & ") || "undefined";
let dataMaps;

if (hasArrayType) {
    dataMaps = {
        body: "body",
        path: "path",
        query: "query"
    };


    const body = requestTypeMap.body ? `${dataMaps.body}?: ${requestTypeMap.body},` : "";
    const path = requestTypeMap.path ? `${dataMaps.path}?: ${requestTypeMap.path},` : "";
    const query = requestTypeMap.query ? `${dataMaps.query}?: ${requestTypeMap.query},` : "";

    requestType = `{${body}${path}${query}}`;
}

const responseType = route.response.type;

const requestContentKind = {
    "JSON": "EnumContentType.Json",
    "URL_ENCODED": "EnumContentType.UrlEncoded",
    "FORM_DATA": "EnumContentType.FormData",
    "TEXT": "EnumContentType.Text"
};

const responseContentKind = {
    "TEXT": "EnumResponseFormat.Text",
    "JSON": "EnumResponseFormat.Json",
    "IMAGE": "EnumResponseFormat.Blob",
    "FORM_DATA": "EnumResponseFormat.FormData"
};

const bodyContentKindTmpl = requestContentKind[requestBodyInfo.contentKind] || null;
const format = responseBodyInfo.success && responseBodyInfo.success.schema && responseBodyInfo.success.schema.contentKind;
const responseFormatTmpl = responseContentKind[responseBodyInfo.success && responseBodyInfo.success.schema && responseBodyInfo.success.schema.contentKind] || null;
const requestName = route.routeName.usage;
%>

const <% ~requestName; %>Config: ICachableRequestConfig<<% ~requestType; %>, <% ~responseType; %>> = {
url: "<% ~path; %>",
cacheKey: "<% ~requestName; %>",
<% ~ bodyContentKindTmpl ? `headers : { [contentTypeKey]: ${bodyContentKindTmpl} },` : ""; %>
<% ~ responseFormatTmpl ? `responseFormat: ${responseFormatTmpl},` : ""; %>
<% ~ validationProperties ? `validationProperties: ${JSON.stringify(validationProperties)},` : ""; %>
<% ~ queryKeys.length ? `queryKeys: ${JSON.stringify(queryKeys)},`: ""; %>
<% ~ dataMaps ? `dataMaps: ${JSON.stringify(dataMaps)},`: ""; %>
};