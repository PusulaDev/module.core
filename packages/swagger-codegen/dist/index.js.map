{"version":3,"file":"index.js","sources":["../__vite-browser-external","../src/index.ts"],"sourcesContent":["export default {}","import { generateApi, GenerateApiOutput } from \"swagger-typescript-api\";\r\nimport path from \"path\";\r\nimport fs from \"fs\";\r\n\r\nexport interface ApiGenerateOptions {\r\n    url: string,\r\n    output?: string\r\n    templates?: string\r\n    /**\r\n     * default: api.ts\r\n     */\r\n    name?: string\r\n}\r\n\r\nconst generateIndex = (data:GenerateApiOutput,output:string) => {\r\n    const { files } = data;\r\n\r\n    const imports = files.map(({ name }) => `export * from \"./${name.replace(\".ts\", \"\")}\";`).join(\"\\n\");\r\n\r\n    fs.writeFile(path.join(output, \"index.ts\"), imports + \"\\n\", (err) => {\r\n        if (err) {\r\n            console.log(err);\r\n            process.exit(1);\r\n        } else {\r\n            console.log(\"Codes are generated \\n\");\r\n            process.exit();\r\n        }\r\n    });\r\n}\r\n\r\nexport const generate = async (options: ApiGenerateOptions) => {\r\n    const defaultOutput = path.resolve(process.cwd(), \"./src/__generated__\");\r\n    const defaultTempaltes = path.resolve(__dirname, \"./src/templates\")\r\n    const { url, output = defaultOutput, templates = defaultTempaltes,name = \"api.ts\" } = options;\r\n\r\n\r\n    try {\r\n        const generateResult = await generateApi({\r\n            name,\r\n            output,\r\n            url,\r\n            httpClientType: \"fetch\",\r\n            generateClient: true,\r\n            generateResponses: true,\r\n            moduleNameIndex: 1,\r\n            singleHttpClient: true,\r\n            cleanOutput: true,\r\n            sortTypes: true,\r\n            extractEnums: true,\r\n            extractRequestParams: true,\r\n            modular: true,\r\n            moduleNameFirstTag: true,\r\n            templates\r\n        })\r\n\r\n        generateIndex(generateResult,output);\r\n    }catch (e){\r\n        console.error(e);\r\n        process.exit(1);\r\n    }\r\n\r\n};\r\n"],"names":["path","generateIndex","data","output","files","imports","name","fs","err","generate","options","defaultOutput","defaultTempaltes","url","templates","generateResult","generateApi","e"],"mappings":";AAAA,MAAeA,IAAA,CAAA,GCcTC,IAAgB,CAACC,GAAuBC,MAAkB;AACtD,QAAA,EAAE,OAAAC,EAAU,IAAAF,GAEZG,IAAUD,EAAM,IAAI,CAAC,EAAE,MAAAE,EAAK,MAAM,oBAAoBA,EAAK,QAAQ,OAAO,EAAE,KAAK,EAAE,KAAK;AAAA,CAAI;AAE/FC,EAAAA,EAAA,UAAUP,EAAK,KAAKG,GAAQ,UAAU,GAAGE,IAAU;AAAA,GAAM,CAACG,MAAQ;AACjE,IAAIA,KACA,QAAQ,IAAIA,CAAG,GACf,QAAQ,KAAK,CAAC,MAEd,QAAQ,IAAI;AAAA,CAAwB,GACpC,QAAQ,KAAK;AAAA,EACjB,CACH;AACL,GAEaC,IAAW,OAAOC,MAAgC;AAC3D,QAAMC,IAAgBX,EAAK,QAAQ,QAAQ,IAAA,GAAO,qBAAqB,GACjEY,IAAmBZ,EAAK,QAAQ,WAAW,iBAAiB,GAC5D,EAAE,KAAAa,GAAK,QAAAV,IAASQ,GAAe,WAAAG,IAAYF,GAAiB,MAAAN,IAAO,SAAa,IAAAI;AAGlF,MAAA;AACM,UAAAK,IAAiB,MAAMC,EAAY;AAAA,MACrC,MAAAV;AAAA,MACA,QAAAH;AAAA,MACA,KAAAU;AAAA,MACA,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,mBAAmB;AAAA,MACnB,iBAAiB;AAAA,MACjB,kBAAkB;AAAA,MAClB,aAAa;AAAA,MACb,WAAW;AAAA,MACX,cAAc;AAAA,MACd,sBAAsB;AAAA,MACtB,SAAS;AAAA,MACT,oBAAoB;AAAA,MACpB,WAAAC;AAAA,IAAA,CACH;AAED,IAAAb,EAAcc,GAAeZ,CAAM;AAAA,WAC/Bc;AACJ,YAAQ,MAAMA,CAAC,GACf,QAAQ,KAAK,CAAC;AAAA,EAClB;AAEJ;"}