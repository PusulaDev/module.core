{"version":3,"file":"index.js","sources":["../__vite-browser-external","../src/generate.ts"],"sourcesContent":["export default {}","import { generateApi, type GenerateApiOutput } from \"swagger-typescript-api\";\nimport path from \"path\";\nimport fs from \"fs\";\n\nexport interface ApiGenerateOptions {\n    url: string,\n    /**\n     * default ./src/__generated__\n     */\n    output?: string\n    /**\n     * default: templates at the pacakge folder.\n     */\n    templates?: string\n    /**\n     * default: api.ts\n     */\n    name?: string\n}\n\nconst generateIndex = (data:GenerateApiOutput,output:string) => {\n    const { files } = data;\n\n    const imports = files.map(({ name }) => `export * from \"./${name.replace(\".ts\", \"\")}\";`).join(\"\\n\");\n\n    fs.writeFile(path.join(output, \"index.ts\"), imports + \"\\n\", (err) => {\n        if (err) {\n            console.log(err);\n            process.exit(1);\n        } else {\n            console.log(\"Codes are generated \\n\");\n            process.exit();\n        }\n    });\n}\n\nexport const generate = async (options: ApiGenerateOptions) => {\n    const defaultOutput = path.resolve(process.cwd(), \"./src/__generated__\");\n    const defaultTempaltes = path.resolve(__dirname, \"./src/templates\")\n    const { url, output = defaultOutput, templates = defaultTempaltes,name = \"api.ts\" } = options;\n\n    try {\n        const generateResult = await generateApi({\n            name,\n            output,\n            url,\n            httpClientType: \"fetch\",\n            generateClient: true,\n            generateResponses: true,\n            moduleNameIndex: 1,\n            singleHttpClient: true,\n            cleanOutput: true,\n            sortTypes: true,\n            extractEnums: true,\n            extractRequestParams: true,\n            modular: true,\n            moduleNameFirstTag: true,\n            templates\n        })\n\n        generateIndex(generateResult,output);\n    }catch (e){\n        console.error(e);\n        process.exit(1);\n    }\n};\n"],"names":["path","generateIndex","data","output","files","imports","name","fs","err","generate","options","defaultOutput","defaultTempaltes","url","templates","generateResult","generateApi","e"],"mappings":";AAAA,MAAeA,IAAA,CAAA,GCoBTC,IAAgB,CAACC,GAAuBC,MAAkB;AACtD,QAAA,EAAE,OAAAC,EAAU,IAAAF,GAEZG,IAAUD,EAAM,IAAI,CAAC,EAAE,MAAAE,EAAK,MAAM,oBAAoBA,EAAK,QAAQ,OAAO,EAAE,KAAK,EAAE,KAAK;AAAA,CAAI;AAE/FC,EAAAA,EAAA,UAAUP,EAAK,KAAKG,GAAQ,UAAU,GAAGE,IAAU;AAAA,GAAM,CAACG,MAAQ;AACjE,IAAIA,KACA,QAAQ,IAAIA,CAAG,GACf,QAAQ,KAAK,CAAC,MAEd,QAAQ,IAAI;AAAA,CAAwB,GACpC,QAAQ,KAAK;AAAA,EACjB,CACH;AACL,GAEaC,IAAW,OAAOC,MAAgC;AAC3D,QAAMC,IAAgBX,EAAK,QAAQ,QAAQ,IAAA,GAAO,qBAAqB,GACjEY,IAAmBZ,EAAK,QAAQ,WAAW,iBAAiB,GAC5D,EAAE,KAAAa,GAAK,QAAAV,IAASQ,GAAe,WAAAG,IAAYF,GAAiB,MAAAN,IAAO,SAAa,IAAAI;AAElF,MAAA;AACM,UAAAK,IAAiB,MAAMC,EAAY;AAAA,MACrC,MAAAV;AAAA,MACA,QAAAH;AAAA,MACA,KAAAU;AAAA,MACA,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,mBAAmB;AAAA,MACnB,iBAAiB;AAAA,MACjB,kBAAkB;AAAA,MAClB,aAAa;AAAA,MACb,WAAW;AAAA,MACX,cAAc;AAAA,MACd,sBAAsB;AAAA,MACtB,SAAS;AAAA,MACT,oBAAoB;AAAA,MACpB,WAAAC;AAAA,IAAA,CACH;AAED,IAAAb,EAAcc,GAAeZ,CAAM;AAAA,WAC/Bc;AACJ,YAAQ,MAAMA,CAAC,GACf,QAAQ,KAAK,CAAC;AAAA,EAClB;AACJ;"}